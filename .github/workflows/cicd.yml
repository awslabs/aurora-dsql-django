name: CI/CD

on:
  push:
    branches: [ version-0 ]
  pull_request:
    branches: [ version-0 ]
  # Give us a button to allow running the workflow on demand for testing.
  workflow_dispatch:
    inputs:
      tags:
        description: 'Manual Workflow Run'
        required: false
        type: string

jobs:
  integration-tests:
    name: Python v${{ matrix.version }}
    runs-on: ubuntu-latest        
    strategy:
      # If we run more than one job at a time, we will have to have one cluster
      # for each flavor of the job. Otherwise they will interfere with each other
      # These tests are quite fast. We don't need to have many clusters.
      max-parallel: 1
      matrix:
        # Run test for every python version we intend to support.
        version: ['3.8', '3.9', '3.10', '3.11', '3.12' ]
    permissions:
      id-token: write
      contents: read
      # Explicitly set permissions, following the principle of least privilege
      actions: read
      checks: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      # with:
      #   # For pull requests, check out the base branch, not the PR branch
      #   ref: ${{ github.event.pull_request.base.sha }}

    - name: Set up Python ${{ matrix.version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.version }}

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-${{ matrix.version }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.DJANGO_ADAPTER_INTEGRATION_TEST_ROLE }}
        aws-region: us-east-1

    - name: Setup venv
      run: |
        pip install --upgrade pip
        pip install --force-reinstall -r requirements.txt
        python3 -c "import boto3; print(boto3.__version__)"
        pip install pytest pytest-cov
        echo "$GITHUB_WORKSPACE" >> $GITHUB_PATH

    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run unit tests
      env:
        DJANGO_SETTINGS_MODULE: aurora_dsql_django.tests.test_settings
      run: |
        pytest --cov=aurora_dsql_django aurora_dsql_django/tests/unit/ --cov-report=xml
  
    - name: Debug test results
      if: always()
      run: |
        cat coverage.xml || echo "coverage.xml not found"
  
    - name: Archive code coverage results
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage-report
        path: coverage-v${{ matrix.version }}.xml

    - name: Run integration tests
      env:
        DJANGO_SETTINGS_MODULE: aurora_dsql_django.tests.test_settings
        CLUSTER_ENDPOINT: ${{ secrets.CLUSTER_ENDPOINT }}
      run: |
        pytest -v aurora_dsql_django/tests/integration/
        
